
# Copyright 2010 Ramon Xuriguera
#
# This file is part of BibtexIndexMaker. 
#
# BibtexIndexMaker is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# BibtexIndexMaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with BibtexIndexMaker. If not, see <http://www.gnu.org/licenses/>.


from bibim import log
from bibim.ie.types import (Example,
                            Wrapper)

class TooFewExamplesError(Exception):
    pass


class WrapperTrainer(object):
    """
    This class generates wrappers that cover a given set of examples and that
    use rules generated by a set of rulers. 
    """
    
    def __init__(self, rulers=[], min=2):
        self.rulers = rulers
        self.min_examples = min
        
    def get_rulers(self):
        return self.__rulers

    def get_min_examples(self):
        return self.__min_examples

    def set_rulers(self, value):
        self.__rulers = value

    def set_min_examples(self, value):
        self.__min_examples = value
        
    rulers = property(get_rulers, set_rulers)
    min_examples = property(get_min_examples, set_min_examples)     

    def train(self, examples):
        """
        Generates all the possible wrappers that cover the given examples.
        
        The content of the examples must be compatible with the input type
        of the first of the rules, i.e. if the first ruler expects a string, 
        the content attribute of the examples must be a string.
        """
        wrappers = []
        if len(examples) < self.min_examples:
            log.warn('Too few examples. Could not train wrappers') #@UndefinedVariable
            return wrappers
        rule_sets = self._get_rule_sets(list(self.rulers), examples)
        for rule_set in rule_sets:
            wrapper = Wrapper(rules=rule_set)
            self._evaluate_wrapper(wrapper, examples)
            wrappers.append(wrapper)
        return wrappers
     
    def _get_rule_sets(self, rulers, example_set):
        """
        Returns all the possible rule sets that can compose a wrapper for a 
        given example set.
        
        Rulers must be in the order should be applied as the output after 
        applying a rule will be used as the input of the next ruler.
        """
        if not len(rulers):
            return [[]]

        current_ruler = rulers.pop(0)
        new_rules = current_ruler.rule(example_set)
        new_rule_sets = []
        for rule in new_rules:
            current_example_set = self._get_new_example_set(rule,
                                                            example_set)
            # Recursion to get all the possibilities
            rule_sets = self._get_rule_sets(list(rulers),
                                            current_example_set)
            map(lambda x: x.insert(0, rule), rule_sets)
            for rule_set in rule_sets:
                new_rule_sets.append(rule_set)
        return new_rule_sets

    def _get_new_example_set(self, rule, example_set):
        """
        Return a list of examples with the same value attribute as example_set
        but where the content is the result of applying rule.
        """
        new_example_set = []
        for example in example_set:
            value = example.value
            content = rule.apply(example.content)
            if value and content:
                new_example_set.append(Example(example.value,
                                               rule.apply(example.content)))
            else:
                log.warn('Example content is None after applying rule')  #@UndefinedVariable
        return new_example_set

    def _evaluate_wrapper(self, wrapper, examples):
        """
        It applies the wrapper to all the available examples and checks if 
        it extracts the expected information. If so, it upvotes the wrapper,
        and downvotes otherwise.
        """
        for example in examples:
            info = wrapper.extract_info(example.content)
            if info == example.value:
                wrapper.upvotes += 1
            else:
                wrapper.downvotes += 1
